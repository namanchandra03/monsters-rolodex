{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAK,SAACC,GAAD,OACd,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJbC,EAAS,SAACR,GAAD,OACjB,qBAAKC,UAAU,YAAf,SAESD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJxBM,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAEnB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCDG,E,kDAzCb,aAAc,IAAD,8BAER,gBAeLH,aAAa,SAACI,GAEL,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAfxC,EAAKC,MAAM,CAEJb,SAAS,GACTU,YAAa,IAPZ,E,qDAWb,WAAoB,IAAD,OAEbI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBAO3C,WAEO,MAA+BC,KAAKN,MAA7Bb,EAAP,EAAOA,SAASU,EAAhB,EAAgBA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAEA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACjG,OACA,sBAAK9B,UAAU,MAAf,UAEG,oBAAIA,UAAU,WAAd,8BACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAGnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GArCfI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.55165be3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card=(props)=>(\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card-component';\r\n\r\nexport const CardList=(props)=>(\r\n     <div className='card-list'>\r\n          {\r\n              props.monsters.map(monster=>(\r\n                  <Card key={monster.id} monster={monster}/>\r\n              ))\r\n           }\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange})=>(\r\n\r\n      <input \r\n      className='search'\r\n      type='search' \r\n      placeholder={placeholder} \r\n      onChange={handleChange} />\r\n              \r\n             \r\n)","\nimport React,{Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component{\n\n  constructor(){\n\n       super();\n\n       this.state={\n                 \n              monsters:[],\n              searchField: ''\n       };\n  }\n  \n  componentDidMount(){\n\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(users=>this.setState({monsters:users}));\n  }\n  handleChange=(e)=>{\n           \n           this.setState({searchField:e.target.value});\n  }\n  \n  render(){\n          \n         const {monsters,searchField} = this.state;\n         const filteredMonsters = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()));\n          return (\n          <div className=\"App\">\n\n             <h1 className='first-h1'>Monsters Rolodex</h1>\n             <SearchBox \n             placeholder='search monsters'\n             handleChange={this.handleChange}\n             />\n           \n             <CardList monsters={filteredMonsters} />\n          \n          </div>\n        );\n     }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}